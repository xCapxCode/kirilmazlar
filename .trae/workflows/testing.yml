# ===========================================
# KIRIILMAZLAR PANEL - TESTING PIPELINE
# Comprehensive testing workflow for all environments
# ===========================================

name: 🧪 Testing Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'

jobs:
  # ===========================================
  # UNIT TESTING
  # ===========================================
  unit-tests:
    name: 🔬 Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🧪 Run Unit Tests
      run: npm run test -- --coverage --reporter=verbose
      env:
        CI: true

    - name: 📊 Coverage Report
      run: |
        echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        npm run test:coverage | tail -n +2 >> $GITHUB_STEP_SUMMARY

    - name: 📤 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: unit-tests

  # ===========================================
  # INTEGRATION TESTING
  # ===========================================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🔗 Run Integration Tests
      run: |
        echo "🔗 Running integration tests..."
        npm run test -- --selectProjects=integration
      env:
        CI: true

    - name: 📊 Integration Test Results
      run: |
        echo "## 🔗 Integration Test Results" >> $GITHUB_STEP_SUMMARY
        echo "✅ All integration tests passed" >> $GITHUB_STEP_SUMMARY

  # ===========================================
  # E2E TESTING
  # ===========================================
  e2e-tests:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🏗️ Build Application
      run: npm run build:dev

    - name: 🚀 Start Application
      run: |
        npm run serve &
        sleep 10
        curl -f http://localhost:4173 || exit 1

    - name: 🎭 Run E2E Tests
      run: |
        echo "🎭 Running E2E tests..."
        npm run test -- --selectProjects=e2e
      env:
        CI: true
        BASE_URL: http://localhost:4173

    - name: 📊 E2E Test Results
      run: |
        echo "## 🎭 E2E Test Results" >> $GITHUB_STEP_SUMMARY
        echo "✅ All E2E tests passed" >> $GITHUB_STEP_SUMMARY

  # ===========================================
  # PERFORMANCE TESTING
  # ===========================================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🏗️ Build Application
      run: npm run build

    - name: 🚀 Start Application
      run: |
        npm run serve &
        sleep 10

    - name: ⚡ Run Lighthouse Performance Audit
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: 📊 Performance Report
      run: |
        echo "## ⚡ Performance Test Results" >> $GITHUB_STEP_SUMMARY
        echo "🎯 Lighthouse audit completed" >> $GITHUB_STEP_SUMMARY
        echo "📈 Performance metrics captured" >> $GITHUB_STEP_SUMMARY

  # ===========================================
  # ACCESSIBILITY TESTING
  # ===========================================
  accessibility-tests:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🏗️ Build Application
      run: npm run build

    - name: 🚀 Start Application
      run: |
        npm run serve &
        sleep 10

    - name: ♿ Run Accessibility Tests
      run: |
        npx @axe-core/cli http://localhost:4173 --exit
      continue-on-error: true

    - name: 📊 Accessibility Report
      run: |
        echo "## ♿ Accessibility Test Results" >> $GITHUB_STEP_SUMMARY
        echo "✅ Accessibility audit completed" >> $GITHUB_STEP_SUMMARY

  # ===========================================
  # SECURITY TESTING
  # ===========================================
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🔒 Security Audit
      run: npm audit --audit-level=moderate

    - name: 🔍 CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: 🏗️ Build for Analysis
      run: npm run build

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: 📊 Security Report
      run: |
        echo "## 🔒 Security Test Results" >> $GITHUB_STEP_SUMMARY
        echo "✅ Security audit completed" >> $GITHUB_STEP_SUMMARY
        echo "🔍 CodeQL analysis performed" >> $GITHUB_STEP_SUMMARY

  # ===========================================
  # TEST SUMMARY
  # ===========================================
  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, accessibility-tests, security-tests]
    if: always()
    
    steps:
    - name: 📋 Generate Test Summary
      run: |
        echo "# 🧪 Kırılmazlar Panel Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Test Suite Results:" >> $GITHUB_STEP_SUMMARY
        echo "- 🔬 Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🔗 Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🎭 E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ⚡ Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ♿ Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎯 Overall Status: " >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" && 
              "${{ needs.e2e-tests.result }}" == "success" ]]; then
          echo "✅ **ALL CRITICAL TESTS PASSED**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **SOME TESTS FAILED**" >> $GITHUB_STEP_SUMMARY
        fi
