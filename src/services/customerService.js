import storage from '@core/storage';
// Removed orderService import to avoid circular dependency
import logger from '@utils/productionLogger';

/**
 * M√º≈üteri y√∂netimi i√ßin servis sƒ±nƒ±fƒ±
 * M√º≈üteri CRUD i≈ülemleri i√ßin kullanƒ±lƒ±r
 */
class CustomerService {
  /**
   * T√ºm m√º≈üterileri getirir
   * @returns {Promise<Array>} - M√º≈üteri listesi
   */
  async getAll() {
    try {
      const customers = await storage.get('customers', []);
      return customers;
    } catch (error) {
      logger.error('M√º≈üteriler y√ºklenirken hata:', error);
      throw error;
    }
  }

  /**
   * ID'ye g√∂re m√º≈üteri getirir
   * @param {number|string} id - M√º≈üteri ID'si
   * @returns {Promise<Object|null>} - M√º≈üteri nesnesi veya null
   */
  async getById(id) {
    try {
      const customers = await storage.get('customers', []);
      return customers.find(customer => customer.id === id) || null;
    } catch (error) {
      logger.error(`ID'si ${id} olan m√º≈üteri y√ºklenirken hata:`, error);
      throw error;
    }
  }

  /**
   * Yeni m√º≈üteri olu≈üturur
   * @param {Object} customerData - M√º≈üteri verileri
   * @returns {Promise<Object>} - Olu≈üturulan m√º≈üteri nesnesi
   */
  async create(customerData) {
    try {
      logger.info('üîÑ CustomerService.create ba≈ülatƒ±lƒ±yor:', customerData);

      const customers = await storage.get('customers', []);
      logger.info('üìã Mevcut m√º≈üteriler:', customers.length);

      const newCustomer = {
        id: Date.now(),
        ...customerData,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        status: 'active'
      };

      logger.info('üìù Olu≈üturulan m√º≈üteri objesi:', newCustomer);

      const updatedCustomers = [...customers, newCustomer];
      logger.info('üíæ Storage\'a kaydedilecek m√º≈üteri listesi:', updatedCustomers.length);

      await storage.set('customers', updatedCustomers);
      logger.info('‚úÖ M√º≈üteri storage\'a kaydedildi');

      // M√º≈üteri hesabƒ±nƒ± users tablosuna da ekle (giri≈ü yapabilmesi i√ßin)
      if (customerData.username && customerData.password) {
        const users = await storage.get('users', []);
        logger.info('üë• Mevcut users:', users.length);

        // Aynƒ± email/username kontrol√º
        const existingUser = users.find(u =>
          u.email === customerData.email || u.username === customerData.username
        );

        if (!existingUser) {
          const newUser = {
            id: newCustomer.id,
            username: customerData.username,
            email: customerData.email,
            password: customerData.password, // Ger√ßek uygulamada hash'lenecek
            name: customerData.name,
            role: 'customer',
            customerId: newCustomer.id,
            createdAt: new Date().toISOString(),
            isActive: true
          };

          users.push(newUser);
          await storage.set('users', users);
          logger.info('‚úÖ M√º≈üteri user hesabƒ± olu≈üturuldu:', customerData.email);
        }
      }

      return newCustomer;
    } catch (error) {
      logger.error('M√º≈üteri olu≈üturulurken hata:', error);
      throw error;
    }
  }

  /**
   * M√º≈üteri bilgilerini g√ºnceller
   * @param {number|string} id - M√º≈üteri ID'si
   * @param {Object} updateData - G√ºncellenecek veriler
   * @returns {Promise<Object|null>} - G√ºncellenmi≈ü m√º≈üteri nesnesi veya null
   */
  async update(id, updateData) {
    try {
      const customers = await storage.get('customers', []);
      const customerIndex = customers.findIndex(customer => customer.id === id);

      if (customerIndex === -1) {
        return null;
      }

      const updatedCustomer = {
        ...customers[customerIndex],
        ...updateData,
        updatedAt: new Date().toISOString()
      };

      customers[customerIndex] = updatedCustomer;
      await storage.set('customers', customers);

      // ƒ∞lgili user hesabƒ±nƒ± da g√ºncelle
      if (updateData.username || updateData.password || updateData.email || updateData.name) {
        const users = await storage.get('users', []);
        const userIndex = users.findIndex(user => user.customerId === id);

        if (userIndex !== -1) {
          const updatedUser = {
            ...users[userIndex],
            ...(updateData.username && { username: updateData.username }),
            ...(updateData.password && { password: updateData.password }),
            ...(updateData.email && { email: updateData.email }),
            ...(updateData.name && { name: updateData.name })
          };

          users[userIndex] = updatedUser;
          await storage.set('users', users);
          logger.info('‚úÖ M√º≈üteri user hesabƒ± da g√ºncellendi:', updateData.email || updatedUser.email);
        }
      }

      return updatedCustomer;
    } catch (error) {
      logger.error(`ID'si ${id} olan m√º≈üteri g√ºncellenirken hata:`, error);
      throw error;
    }
  }

  /**
   * M√º≈üteriyi siler
   * @param {number|string} id - M√º≈üteri ID'si
   * @returns {Promise<boolean>} - Ba≈üarƒ±lƒ± ise true, deƒüilse false
   */
  async delete(id) {
    try {
      const customers = await storage.get('customers', []);
      const customerToDelete = customers.find(customer => customer.id === id);
      const filteredCustomers = customers.filter(customer => customer.id !== id);

      if (filteredCustomers.length === customers.length) {
        return false; // M√º≈üteri bulunamadƒ±
      }

      await storage.set('customers', filteredCustomers);

      // ƒ∞lgili user hesabƒ±nƒ± da sil
      if (customerToDelete && customerToDelete.email) {
        const users = await storage.get('users', []);
        const filteredUsers = users.filter(user =>
          user.email !== customerToDelete.email && user.customerId !== id
        );

        if (filteredUsers.length !== users.length) {
          await storage.set('users', filteredUsers);
          logger.info('‚úÖ M√º≈üteri user hesabƒ± da silindi:', customerToDelete.email);
        }
      }

      return true;
    } catch (error) {
      logger.error(`ID'si ${id} olan m√º≈üteri silinirken hata:`, error);
      throw error;
    }
  }

  /**
   * M√º≈üteri arama i≈ülemi
   * @param {string} query - Arama sorgusu
   * @returns {Promise<Array>} - Filtrelenmi≈ü m√º≈üteri listesi
   */
  async search(query) {
    try {
      const customers = await storage.get('customers', []);

      if (!query || query.trim() === '') {
        return customers;
      }

      const searchTerm = query.toLowerCase().trim();

      return customers.filter(customer =>
        customer.name?.toLowerCase().includes(searchTerm) ||
        customer.email?.toLowerCase().includes(searchTerm) ||
        customer.phone?.includes(searchTerm) ||
        customer.address?.toLowerCase().includes(searchTerm)
      );
    } catch (error) {
      logger.error('M√º≈üteri arama i≈üleminde hata:', error);
      throw error;
    }
  }

  /**
   * M√º≈üterinin sipari≈ü ge√ßmi≈üini getirir - CROSS-CONTAMINATION SAFE
   * @param {number|string} customerId - M√º≈üteri ID'si
   * @returns {Promise<Array>} - M√º≈üterinin sipari≈ü listesi
   */
  async getCustomerOrders(customerId) {
    try {
      // Import orderService dinamik olarak circular dependency'yi √∂nlemek i√ßin
      const { default: orderService } = await import('./orderService.js');

      // CRITICAL: Use the improved getByCustomerId method
      return await orderService.getByCustomerId(customerId);
    } catch (error) {
      logger.error(`M√º≈üteri ${customerId} sipari≈üleri y√ºklenirken hata:`, error);
      throw error;
    }
  }

  /**
   * M√º≈üteri istatistiklerini getirir
   * @param {number|string} customerId - M√º≈üteri ID'si
   * @returns {Promise<Object>} - M√º≈üteri istatistikleri
   */
  async getCustomerStats(customerId) {
    try {
      const orders = await this.getCustomerOrders(customerId);

      const totalOrders = orders.length;
      const completedOrders = orders.filter(order => order.status === 'Teslim Edildi').length;
      const totalSpent = orders
        .filter(order => order.status === 'Teslim Edildi')
        .reduce((sum, order) => sum + (order.total || 0), 0);
      const averageOrderValue = completedOrders > 0 ? totalSpent / completedOrders : 0;

      return {
        totalOrders,
        completedOrders,
        totalSpent,
        averageOrderValue,
        lastOrderDate: orders.length > 0 ?
          Math.max(...orders.map(order => new Date(order.orderDate).getTime())) : null
      };
    } catch (error) {
      logger.error(`M√º≈üteri ${customerId} istatistikleri y√ºklenirken hata:`, error);
      throw error;
    }
  }

  /**
   * En iyi m√º≈üterileri getirir (harcama miktarƒ±na g√∂re)
   * @param {number} limit - Ka√ß m√º≈üteri getirileceƒüi
   * @returns {Promise<Array>} - En iyi m√º≈üteri listesi
   */
  async getTopCustomers(limit = 10) {
    try {
      const customers = await storage.get('customers', []);
      const customersWithStats = await Promise.all(
        customers.map(async (customer) => {
          const stats = await this.getCustomerStats(customer.id);
          return {
            ...customer,
            ...stats
          };
        })
      );

      return customersWithStats
        .sort((a, b) => b.totalSpent - a.totalSpent)
        .slice(0, limit);
    } catch (error) {
      logger.error('En iyi m√º≈üteriler y√ºklenirken hata:', error);
      throw error;
    }
  }

  /**
   * Aktif m√º≈üteri sayƒ±sƒ±nƒ± getirir
   * @returns {Promise<number>} - Aktif m√º≈üteri sayƒ±sƒ±
   */
  async getActiveCustomerCount() {
    try {
      const customers = await storage.get('customers', []);
      return customers.filter(customer => customer.status === 'active').length;
    } catch (error) {
      logger.error('Aktif m√º≈üteri sayƒ±sƒ± y√ºklenirken hata:', error);
      throw error;
    }
  }

  /**
   * M√º≈üteri durumunu g√ºnceller
   * @param {number|string} id - M√º≈üteri ID'si
   * @param {string} status - Yeni durum ('active', 'inactive', 'blocked')
   * @returns {Promise<Object|null>} - G√ºncellenmi≈ü m√º≈üteri nesnesi veya null
   */
  async updateStatus(id, status) {
    try {
      return await this.update(id, { status });
    } catch (error) {
      logger.error(`M√º≈üteri ${id} durumu g√ºncellenirken hata:`, error);
      throw error;
    }
  }
}

export default new CustomerService();
