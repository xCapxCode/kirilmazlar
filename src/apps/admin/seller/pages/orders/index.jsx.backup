import React, { useState, useEffect, useMemo } from 'react';
import { useAuth } from '../../../../../contexts/AuthContext';
import SaticiHeader from '../../../../../shared/components/ui/SaticiHeader';
import Icon from '../../../../../shared/components/AppIcon';
import storage from '../../../../../core/storage/index.js';

// Unique ID generator
const generateUniqueId = (prefix = 'ORDER') => {
  const timestamp = Date.now();
  const random = Math.random().toString(36).substring(2, 15);
  const unique = Math.random().toString(36).substring(2, 15);
  return `${prefix}-${timestamp}-${random}-${unique}`;
};

// Bile≈üenler
import SiparisDetayModali from './components/SiparisDetayModali';
import DurumGuncellemeModali from './components/DurumGuncellemeModali';

const SiparisYonetimi = () => {
  const { user, userProfile, loading: authLoading } = useAuth();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [orders, setOrders] = useState([]);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [showOrderDetail, setShowOrderDetail] = useState(false);
  const [showStatusUpdate, setShowStatusUpdate] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const [filters, setFilters] = useState({
    search: '',
    status: '',
    dateRange: 'all',
    sortBy: 'newest'
  });

  // Cross-tab communication for orders
  useEffect(() => {
    const handleStorageChange = (e) => {
      if (e.key === 'sellerOrders' || e.key === 'customerOrders') {
        loadCustomerOrders();
        console.log('üîÑ Orders updated from another tab');
      }
    };

    const handleOrdersUpdated = () => {
      loadCustomerOrders();
      console.log('üîÑ Orders updated from same tab');
    };

    const handleNewOrder = (event) => {
      console.log('üîî New order received:', event.detail);
      loadCustomerOrders();
      window.showToast && window.showToast('Yeni sipari≈ü alƒ±ndƒ±!', 'success');
    };

    // orderSyncUtils event'lerini dinle
    const handleAllOrdersCleared = () => {
      console.log('T√ºm sipari≈üler temizlendi - satƒ±cƒ± panel g√ºncellemesi');
      loadOrders();
    };

    const handleOrderDeleted = (event) => {
      console.log('Sipari≈ü silindi - satƒ±cƒ± panel g√ºncellemesi:', event.detail.orderId);
      loadOrders();
    };

    const handleOrderStatusUpdated = (event) => {
      console.log('Sipari≈ü durumu g√ºncellendi - satƒ±cƒ± panel:', event.detail);
      loadOrders();
    };

    // Listen for storage events (cross-tab)
    window.addEventListener('storage', handleStorageChange);
    
    // Listen for custom events (same-tab)
    window.addEventListener('ordersUpdated', handleOrdersUpdated);
    window.addEventListener('newOrderReceived', handleNewOrder);
    window.addEventListener('allOrdersCleared', handleAllOrdersCleared);
    window.addEventListener('orderDeleted', handleOrderDeleted);
    window.addEventListener('orderStatusUpdated', handleOrderStatusUpdated);

    return () => {
      window.removeEventListener('storage', handleStorageChange);
      window.removeEventListener('ordersUpdated', handleOrdersUpdated);
      window.removeEventListener('newOrderReceived', handleNewOrder);
      window.removeEventListener('allOrdersCleared', handleAllOrdersCleared);
      window.removeEventListener('orderDeleted', handleOrderDeleted);
      window.removeEventListener('orderStatusUpdated', handleOrderStatusUpdated);
    };
  }, []);

  // M√º≈üteri sipari≈ülerini y√ºkle
  useEffect(() => {
    const loadCustomerOrders = () => {
      try {
        // localStorage'dan m√º≈üteri sipari≈ülerini al
        const savedOrders = localStorage.getItem('customerOrders');
        const savedSellerOrders = localStorage.getItem('sellerOrders');
        let customerOrders = [];
        let sellerOrders = [];
        
        if (savedOrders) {
          const parsedOrders = JSON.parse(savedOrders);
          customerOrders = parsedOrders.map((order, index) => ({
            id: order.id || generateUniqueId(`CUSTOMER-${index}`),
            orderNumber: order.id || `SIP-${Date.now().toString().slice(-6)}${Math.floor(Math.random() * 999) + 100}`,
            customerName: 'B√ºlent √úner',
            customerPhone: '0532 123 45 67',
            customerEmail: 'musteri@demo.com',
            status: getStatusText(order.status),
            total: order.total,
            itemCount: order.items.length,
            createdAt: order.date,
            updatedAt: order.date,
            items: order.items.map(item => ({
              id: item.id,
              productName: item.name,
              quantity: item.quantity,
              unit: item.unit,
              price: item.price,
              total: item.total
            })),
            notes: order.notes || '',
            deliveryAddress: order.deliveryAddress || 'Atat√ºrk Caddesi No: 123, Kadƒ±k√∂y, ƒ∞stanbul',
            originalStatus: order.status,
            isFromCustomer: true
          }));
        }

        // Satƒ±cƒ± localStorage'dan da sipari≈üleri al
        if (savedSellerOrders) {
          const parsedSellerOrders = JSON.parse(savedSellerOrders);
          sellerOrders = parsedSellerOrders.filter(order => order.isFromCustomer);
        }

        // Demo sipari≈üleri kontrol et - eƒüer temizlenmi≈üse demo sipari≈üleri g√∂sterme
        const demoDisabled = isDemoOrdersDisabled();
        
        let allOrders;
        if (demoDisabled) {
          // Sadece ger√ßek sipari≈üleri g√∂ster
          allOrders = [...sellerOrders, ...customerOrders];
        } else {
          // Demo sipari≈üler - unique ID'lerle
          const mockOrders = [
          {
            id: generateUniqueId('DEMO-SELLER-001'),
            orderNumber: 'SIP-241001',
            customerName: 'Ahmet Yƒ±lmaz',
            customerPhone: '0532 123 45 67',
            customerEmail: 'ahmet@email.com',
            status: 'Beklemede',
            total: 165.50,
            itemCount: 5,
            createdAt: new Date(Date.now() - 86400000).toISOString(),
            updatedAt: new Date().toISOString(),
            items: [
              { id: 1, productName: 'Domates', quantity: 3, unit: 'kg', price: 15.00, total: 45.00 },
              { id: 2, productName: 'Salatalƒ±k', quantity: 2, unit: 'kg', price: 8.00, total: 16.00 },
              { id: 3, productName: 'Patates', quantity: 5, unit: 'kg', price: 6.50, total: 32.50 },
              { id: 4, productName: 'Soƒüan', quantity: 2, unit: 'kg', price: 4.00, total: 8.00 },
              { id: 5, productName: 'Havu√ß', quantity: 4, unit: 'kg', price: 16.00, total: 64.00 }
            ],
            notes: 'Taze √ºr√ºnler istiyorum',
            deliveryAddress: 'Atat√ºrk Mah. Cumhuriyet Cad. No:15 Merkez/ƒ∞stanbul',
            originalStatus: 'pending'
          },
          {
            id: generateUniqueId('DEMO-SELLER-002'),
            orderNumber: 'SIP-241002',
            customerName: 'Fatma Demir',
            customerPhone: '0533 456 78 90',
            customerEmail: 'fatma@email.com',
            status: 'Onaylandƒ±',
            total: 89.25,
            itemCount: 3,
            createdAt: new Date(Date.now() - 7200000).toISOString(),
            updatedAt: new Date(Date.now() - 1800000).toISOString(),
            items: [
              { id: 1, productName: 'Elma', quantity: 2, unit: 'kg', price: 12.00, total: 24.00 },
              { id: 2, productName: 'Portakal', quantity: 3, unit: 'kg', price: 10.00, total: 30.00 },
              { id: 3, productName: 'Muz', quantity: 5, unit: 'kg', price: 7.05, total: 35.25 }
            ],
            notes: '',
            deliveryAddress: 'Yenimahalle 123. Sokak No:7 √áankaya/Ankara',
            originalStatus: 'confirmed'
          },
          {
            id: generateUniqueId('DEMO-SELLER-003'),
            orderNumber: 'SIP-241003',
            customerName: 'Mehmet Kaya',
            customerPhone: '0544 789 01 23',
            customerEmail: 'mehmet@email.com',
            status: 'Hazƒ±rlanƒ±yor',
            total: 245.75,
            itemCount: 7,
            createdAt: new Date(Date.now() - 3600000).toISOString(),
            updatedAt: new Date(Date.now() - 900000).toISOString(),
            items: [
              { id: 1, productName: 'Domates', quantity: 5, unit: 'kg', price: 15.00, total: 75.00 },
              { id: 2, productName: 'Biber', quantity: 3, unit: 'kg', price: 18.00, total: 54.00 },
              { id: 3, productName: 'Patlƒ±can', quantity: 4, unit: 'kg', price: 12.50, total: 50.00 },
              { id: 4, productName: 'Kabak', quantity: 2, unit: 'kg', price: 8.75, total: 17.50 },
              { id: 5, productName: 'Fasulye', quantity: 3, unit: 'kg', price: 16.25, total: 48.75 }
            ],
            notes: 'Ak≈üam teslimat',
            deliveryAddress: 'Konak Mahallesi 456. Sokak No:12 ƒ∞zmir',
            originalStatus: 'preparing'
          },
          {
            id: generateUniqueId('DEMO-SELLER-004'),
            orderNumber: 'SIP-241004',
            customerName: 'Ay≈üe √ñzkan',
            customerPhone: '0555 321 65 47',
            customerEmail: 'ayse@email.com',
            status: 'Teslim Edildi',
            total: 125.00,
            itemCount: 4,
            createdAt: new Date(Date.now() - 172800000).toISOString(),
            updatedAt: new Date(Date.now() - 86400000).toISOString(),
            items: [
              { id: 1, productName: 'Elma', quantity: 3, unit: 'kg', price: 12.00, total: 36.00 },
              { id: 2, productName: 'Armut', quantity: 2, unit: 'kg', price: 14.50, total: 29.00 },
              { id: 3, productName: '√úz√ºm', quantity: 4, unit: 'kg', price: 15.00, total: 60.00 }
            ],
            notes: 'Pastane i√ßin meyveler',
            deliveryAddress: 'Osmangazi Caddesi No:654 Bursa',
            originalStatus: 'delivered'
          }
        ];

          // Ger√ßek sipari≈üleri ve demo sipari≈üleri birle≈ütir
          allOrders = [...sellerOrders, ...customerOrders, ...mockOrders];
        }
        
        // Duplicate ID'leri filtrele
        const seenIds = new Set();
        allOrders = allOrders.filter(order => {
          if (seenIds.has(order.id)) {
            console.warn(`Duplicate order ID found and removed: ${order.id}`);
            return false;
          }
          seenIds.add(order.id);
          return true;
        });
        
        console.log(`‚úÖ Loaded ${allOrders.length} unique orders`);
        setOrders(allOrders);
        setLoading(false);
      } catch (error) {
        console.error('Sipari≈üler y√ºklenirken hata:', error);
        setLoading(false);
      }
    };

    loadCustomerOrders();
    
    // localStorage deƒüi≈üikliklerini dinle
    const handleStorageChange = () => {
      loadCustomerOrders();
    };
    
    // Yeni sipari≈ü bildirimlerini dinle
    const handleNewOrder = (event) => {
      console.log('Yeni sipari≈ü bildirimi alƒ±ndƒ±:', event.detail);
      loadCustomerOrders();
      
      // Toast bildirimi g√∂ster
      const toastEvent = new CustomEvent('showToast', {
        detail: { 
          message: `Yeni sipari≈ü alƒ±ndƒ±: ${event.detail.order.orderNumber}`, 
          type: 'success' 
        }
      });
      window.dispatchEvent(toastEvent);
    };
    
    window.addEventListener('storage', handleStorageChange);
    window.addEventListener('newOrderReceived', handleNewOrder);
    
    // Her 5 saniyede bir kontrol et
    const interval = setInterval(loadCustomerOrders, 5000);
    
    return () => {
      window.removeEventListener('storage', handleStorageChange);
      window.removeEventListener('newOrderReceived', handleNewOrder);
      clearInterval(interval);
    };
  }, []);

  // Filtrelenmi≈ü ve sƒ±ralanmƒ±≈ü sipari≈üler
  const filteredOrders = useMemo(() => {
    let filtered = [...orders];

    // Arama filtresi
    if (filters.search) {
      const searchLower = filters.search.toLowerCase();
      filtered = filtered.filter(order =>
        order.orderNumber.toLowerCase().includes(searchLower) ||
        order.customerName.toLowerCase().includes(searchLower) ||
        order.customerPhone.includes(filters.search) ||
        order.customerEmail.toLowerCase().includes(searchLower)
      );
    }

    // Durum filtresi
    if (filters.status) {
      filtered = filtered.filter(order => order.status === filters.status);
    }

    // Tarih filtresi
    if (filters.dateRange !== 'all') {
      const now = new Date();
      const filterDate = new Date();
      
      switch (filters.dateRange) {
        case 'today':
          filterDate.setHours(0, 0, 0, 0);
          break;
        case 'week':
          filterDate.setDate(now.getDate() - 7);
          break;
        case 'month':
          filterDate.setMonth(now.getMonth() - 1);
          break;
      }
      
      filtered = filtered.filter(order => new Date(order.createdAt) >= filterDate);
    }

    // Sƒ±ralama
    filtered.sort((a, b) => {
      switch (filters.sortBy) {
        case 'newest':
          return new Date(b.createdAt) - new Date(a.createdAt);
        case 'oldest':
          return new Date(a.createdAt) - new Date(b.createdAt);
        case 'amount_high':
          return b.total - a.total;
        case 'amount_low':
          return a.total - b.total;
        case 'customer':
          return a.customerName.localeCompare(b.customerName);
        default:
          return 0;
      }
    });

    return filtered;
  }, [orders, filters]);

  // Sayfalama
  const paginatedOrders = useMemo(() => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    return filteredOrders.slice(startIndex, startIndex + itemsPerPage);
  }, [filteredOrders, currentPage]);

  const totalPages = Math.ceil(filteredOrders.length / itemsPerPage);

  // ƒ∞statistikler
  const statistics = useMemo(() => {
    const totalOrders = orders.length;
    const pendingOrders = orders.filter(order => order.status === 'Beklemede').length;
    const confirmedOrders = orders.filter(order => order.status === 'Onaylandƒ±').length;
    const preparingOrders = orders.filter(order => order.status === 'Hazƒ±rlanƒ±yor').length;
    const deliveredOrders = orders.filter(order => order.status === 'Teslim Edildi').length;
    const totalRevenue = orders.filter(order => order.status === 'Teslim Edildi').reduce((sum, order) => sum + order.total, 0);

    return {
      totalOrders,
      pendingOrders,
      confirmedOrders,
      preparingOrders,
      deliveredOrders,
      totalRevenue
    };
  }, [orders]);

  // Mevcut durum se√ßenekleri
  const availableStatuses = useMemo(() => {
    const statuses = [...new Set(orders.map(order => order.status))];
    return statuses.sort();
  }, [orders]);

  // Status √ßeviri fonksiyonu
  const getStatusText = (status) => {
    switch (status) {
      case 'pending': return 'Beklemede';
      case 'confirmed': return 'Onaylandƒ±';
      case 'preparing': return 'Hazƒ±rlanƒ±yor';
      case 'out_for_delivery': return 'Yolda';
      case 'delivered': return 'Teslim Edildi';
      case 'cancelled': return 'ƒ∞ptal Edildi';
      default: return status;
    }
  };

  // Para formatƒ±
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('tr-TR', {
      style: 'currency',
      currency: 'TRY'
    }).format(amount);
  };

  // Tarih formatƒ±
  const formatDate = (dateString) => {
    if (!dateString) return '-';
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return '-';
    return new Intl.DateTimeFormat('tr-TR', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };

  // Durum rengini al
  const getStatusColor = (status) => {
    switch (status) {
      case 'Beklemede': return 'bg-yellow-100 text-yellow-800';
      case 'Onaylandƒ±': return 'bg-blue-100 text-blue-800';
      case 'Hazƒ±rlanƒ±yor': return 'bg-purple-100 text-purple-800';
      case 'Yolda': return 'bg-orange-100 text-orange-800';
      case 'Teslim Edildi': return 'bg-green-100 text-green-800';
      case 'ƒ∞ptal Edildi': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // Filtre deƒüi≈üikliƒüi
  const handleFilterChange = (newFilters) => {
    setFilters({ ...filters, ...newFilters });
    setCurrentPage(1);
  };

  // Filtreleri sƒ±fƒ±rla
  const handleResetFilters = () => {
    setFilters({
      search: '',
      status: '',
      dateRange: 'all',
      sortBy: 'newest'
    });
    setCurrentPage(1);
  };

  // Sipari≈ü detayƒ±nƒ± a√ß
  const handleOrderDetail = (order) => {
    setSelectedOrder(order);
    setShowOrderDetail(true);
  };

  // Durum g√ºncelleme modalƒ±nƒ± a√ß
  const handleOpenStatusModal = (order) => {
    setSelectedOrder(order);
    setShowStatusUpdate(true);
  };

  // Hƒ±zlƒ± durum g√ºncelleme (doƒürudan)
  const handleQuickStatusUpdate = (orderId, newStatus, notes = '') => {
    try {
      // Senkronize g√ºncelleme kullan
      updateOrderStatus(orderId, newStatus);
      
      // Local state'i g√ºncelle
      const updatedOrders = orders.map(order => 
        order.id === orderId 
          ? { 
              ...order, 
              status: newStatus, 
              updatedAt: new Date().toISOString(),
              statusNotes: notes 
            }
          : order
      );
      setOrders(updatedOrders);

      // Sipari≈ü onaylandƒ±ƒüƒ±nda stok d√º≈üme i≈ülemi
      if (newStatus === 'Onaylandƒ±') {
        const order = orders.find(o => o.id === orderId);
        if (order && order.items) {
          updateProductStocks(order.items);
        }
      }

      window.showToast && window.showToast(`Sipari≈ü durumu "${newStatus}" olarak g√ºncellendi`, 'success');
    } catch (error) {
      console.error('Sipari≈ü durumu g√ºncellenirken hata:', error);
      window.showToast && window.showToast('Sipari≈ü durumu g√ºncellenirken hata olu≈ütu', 'error');
    }
  };

  // Durum g√ºncelleme i≈ülemi
  const handleUpdateStatus = (orderId, newStatus, notes) => {
    console.log('üîÑ handleUpdateStatus called:', { orderId, newStatus, notes });
    
    try {
      // Senkronize g√ºncelleme kullan
      updateOrderStatus(orderId, newStatus);
      console.log('‚úÖ updateOrderStatus completed');
      
      // Local state'i g√ºncelle
      const updatedOrders = orders.map(order => 
        order.id === orderId 
          ? { 
              ...order, 
              status: newStatus, 
              updatedAt: new Date().toISOString(),
              statusNotes: notes 
            }
          : order
      );
      setOrders(updatedOrders);
      console.log('‚úÖ Local orders state updated');

      // Sipari≈ü onaylandƒ±ƒüƒ±nda stok d√º≈üme i≈ülemi
      if (newStatus === 'Onaylandƒ±') {
        const order = orders.find(o => o.id === orderId);
        if (order && order.items) {
          updateProductStocks(order.items);
          console.log('‚úÖ Product stocks updated');
        }
      }

      window.showToast && window.showToast('Sipari≈ü durumu g√ºncellendi', 'success');
    } catch (error) {
      console.error('‚ùå Sipari≈ü durumu g√ºncellenirken hata:', error);
      window.showToast && window.showToast('Sipari≈ü durumu g√ºncellenirken hata olu≈ütu', 'error');
    }

    setShowStatusUpdate(false);
    setSelectedOrder(null);
  };

  // M√º≈üteri tarafƒ±na durum g√ºncellemesi g√∂nder
  const updateCustomerOrderStatus = (orderId, newStatus, notes) => {
    try {
      // M√º≈üteri sipari≈ülerini g√ºncelle
      const savedCustomerOrders = localStorage.getItem('customerOrders');
      if (savedCustomerOrders) {
        const customerOrders = JSON.parse(savedCustomerOrders);
        const orderExists = customerOrders.find(order => order.id === orderId);
        
        if (orderExists) {
          const originalStatus = getOriginalStatus(newStatus);
          const updatedCustomerOrders = customerOrders.map(order => {
            if (order.id === orderId) {
              // Timeline g√ºncelle
              const updatedTimeline = order.timeline ? [...order.timeline] : [
                { status: "confirmed", time: null, completed: false },
                { status: "preparing", time: null, completed: false },
                { status: "out_for_delivery", time: null, completed: false },
                { status: "delivered", time: null, completed: false }
              ];
              
              // Mevcut duruma kadar olan adƒ±mlarƒ± tamamla
              const statusOrder = ["confirmed", "preparing", "out_for_delivery", "delivered"];
              const currentIndex = statusOrder.indexOf(originalStatus);
              
              if (currentIndex >= 0) {
                for (let i = 0; i <= currentIndex; i++) {
                  const timelineItem = updatedTimeline.find(item => item.status === statusOrder[i]);
                  if (timelineItem) {
                    timelineItem.completed = true;
                    timelineItem.time = new Date();
                  }
                }
              }
              
              return {
                ...order,
                status: originalStatus,
                timeline: updatedTimeline,
                lastStatusUpdate: new Date(),
                statusNotes: notes || ''
              };
            }
            return order;
          });
          
          localStorage.setItem('customerOrders', JSON.stringify(updatedCustomerOrders));
          
          // M√º≈üteri tarafƒ±na bildirim g√∂nder
          const event = new CustomEvent('orderStatusUpdated', {
            detail: { 
              orderId,
              newStatus: originalStatus,
              displayStatus: newStatus,
              notes,
              timestamp: new Date()
            }
          });
          window.dispatchEvent(event);
          
          console.log(`Sipari≈ü ${orderId} durumu m√º≈üteriye iletildi: ${newStatus}`);
        }
      }
    } catch (error) {
      console.error('M√º≈üteri durum g√ºncellemesi hatasƒ±:', error);
    }
  };

  // Stok d√º≈üme fonksiyonu
  const updateProductStocks = (orderItems) => {
    try {
      const savedProducts = localStorage.getItem('products');
      if (savedProducts) {
        const products = JSON.parse(savedProducts);
        
        // Her sipari≈ü kalemi i√ßin stok d√º≈ü
        const updatedProducts = products.map(product => {
          const orderItem = orderItems.find(item => 
            item.productName === product.name || item.id === product.id
          );
          
          if (orderItem) {
            const newStock = Math.max(0, product.stock - orderItem.quantity);
            console.log(`${product.name} stoku g√ºncellendi: ${product.stock} -> ${newStock}`);
            return {
              ...product,
              stock: newStock,
              status: newStock === 0 ? 'inactive' : product.status,
              updatedAt: new Date().toISOString()
            };
          }
          
          return product;
        });
        
        // G√ºncellenmi≈ü √ºr√ºnleri localStorage'a kaydet
        localStorage.setItem('products', JSON.stringify(updatedProducts));
        
        // Storage event'i tetikle
        window.dispatchEvent(new Event('storage'));
        
        console.log('√úr√ºn stoklarƒ± ba≈üarƒ±yla g√ºncellendi');
      }
    } catch (error) {
      console.error('Stok g√ºncelleme hatasƒ±:', error);
    }
  };

  // Status'u orijinal deƒüere √ßevir
  const getOriginalStatus = (displayStatus) => {
    switch (displayStatus) {
      case 'Beklemede': return 'pending';
      case 'Onaylandƒ±': return 'confirmed';
      case 'Hazƒ±rlanƒ±yor': return 'preparing';
      case 'Yolda': return 'out_for_delivery';
      case 'Teslim Edildi': return 'delivered';
      case 'ƒ∞ptal Edildi': return 'cancelled';
      default: return displayStatus.toLowerCase();
    }
  };

  // Excel raporu export fonksiyonu
  const handleExportExcel = () => {
    try {
      // CSV formatƒ±nda veri hazƒ±rla
      const csvData = [
        ['Sipari≈ü No', 'M√º≈üteri Adƒ±', 'Telefon', 'Durum', 'Tutar', '√úr√ºn Sayƒ±sƒ±', 'Tarih'],
        ...filteredOrders.map(order => [
          order.orderNumber,
          order.customerName,
          order.customerPhone,
          order.status,
          formatCurrency(order.total),
          order.itemCount,
          formatDate(order.createdAt)
        ])
      ];
      
      // CSV string'i olu≈ütur
      const csvString = csvData.map(row => 
        row.map(field => `"${field}"`).join(',')
      ).join('\n');
      
      // BOM ekle (UTF-8 desteƒüi i√ßin)
      const csvWithBOM = '\uFEFF' + csvString;
      
      // Dosya olu≈ütur ve indir
      const blob = new Blob([csvWithBOM], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      if (link.download !== undefined) {
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `siparis_raporu_${new Date().toISOString().split('T')[0]}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }
    } catch (error) {
      console.error('Excel raporu olu≈üturulamadƒ±:', error);
      alert('Excel raporu olu≈üturulamadƒ±. L√ºtfen tekrar deneyin.');
    }
  };

  // T√ºm sipari≈üleri temizle
  const handleClearAllOrders = () => {
    const confirmed = window.confirm(
      'T√ºm sipari≈üleri silmek istediƒüinizden emin misiniz?\n\nBu i≈ülem geri alƒ±namaz ve hem satƒ±cƒ± hem m√º≈üteri panelindeki t√ºm sipari≈üleri silecektir.'
    );
    
    if (confirmed) {
      try {
        // orderSyncUtils ile temizle
        clearAllOrders();
        
        // Local state'i temizle
        setOrders([]);
        
        window.showToast && window.showToast('T√ºm sipari≈üler ba≈üarƒ±yla temizlendi', 'success');
      } catch (error) {
        console.error('Sipari≈üler temizlenirken hata:', error);
        window.showToast && window.showToast('Sipari≈üler temizlenirken hata olu≈ütu', 'error');
      }
    }
  };

  // Tek sipari≈ü silme
  const handleDeleteSingleOrder = (orderId) => {
    const order = orders.find(o => o.id === orderId);
    const confirmed = window.confirm(
      `"${order?.orderNumber || orderId}" numaralƒ± sipari≈üi silmek istediƒüinizden emin misiniz?\n\nBu i≈ülem geri alƒ±namaz.`
    );
    
    if (confirmed) {
      try {
        // orderSyncUtils ile sil
        deleteOrder(orderId);
        
        // Local state'den sil
        setOrders(orders.filter(o => o.id !== orderId));
        window.showToast && window.showToast('Sipari≈ü ba≈üarƒ±yla silindi', 'success');
      } catch (error) {
        console.error('Sipari≈ü silinirken hata:', error);
        window.showToast && window.showToast('Sipari≈ü silinirken hata olu≈ütu', 'error');
      }
    }
  };

  // Satƒ±cƒ± deƒüilse y√∂nlendir
  useEffect(() => {
    if (!authLoading && userProfile && userProfile.role !== 'seller' && userProfile.role !== 'admin') {
      window.location.href = '/customer/catalog';
    }
  }, [authLoading, userProfile]);

  if (authLoading || loading) {
    return (
      <div className="min-h-screen bg-slate-200 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-green-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Sipari≈üler y√ºkleniyor...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-slate-200">
      <SaticiHeader />
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Ba≈ülƒ±k Bandƒ± */}
        <div className="bg-slate-100 rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Icon name="ShoppingCart" size={24} className="text-blue-600" />
              <div>
                <h1 className="text-2xl font-bold text-blue-600">Sipari≈ü Y√∂netimi</h1>
                <p className="text-gray-600 mt-1">M√º≈üteri sipari≈ülerini y√∂netin ve takip edin</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-3">
              <button
                onClick={() => setFilters({ 
                  search: '', 
                  status: '', 
                  dateRange: '', 
                  sortBy: 'newest' 
                })}
                className="flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50/50 transition-colors bg-transparent"
              >
                <Icon name="RefreshCw" size={18} />
                <span>Filtreleri Sƒ±fƒ±rla</span>
              </button>
              
              <button
                onClick={handleExportExcel}
                className="flex items-center space-x-2 px-4 py-2 bg-transparent border-2 border-green-600 text-green-600 rounded-lg hover:bg-green-600/10 transition-colors"
              >
                <Icon name="Download" size={18} />
                <span>Excel Raporu</span>
              </button>

              <button
                onClick={handleClearAllOrders}
                className="flex items-center space-x-2 px-4 py-2 bg-transparent border-2 border-red-600 text-red-600 rounded-lg hover:bg-red-600/10 transition-colors"
              >
                <Icon name="Trash2" size={18} />
                <span>T√ºm Sipari≈üleri Temizle</span>
              </button>
            </div>
          </div>
        </div>

        {/* ƒ∞statistikler */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8">
          <div className="bg-slate-100 rounded-lg p-6 shadow-sm border border-gray-200">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <Icon name="ShoppingCart" size={24} className="text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Toplam Sipari≈ü</p>
                <p className="text-2xl font-bold text-gray-900">{statistics.totalOrders}</p>
              </div>
            </div>
          </div>

          <div className="bg-slate-100 rounded-lg p-6 shadow-sm border border-gray-200">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <Icon name="Clock" size={24} className="text-yellow-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Beklemede</p>
                <p className="text-2xl font-bold text-gray-900">{statistics.pendingOrders}</p>
              </div>
            </div>
          </div>

          <div className="bg-slate-100 rounded-lg p-6 shadow-sm border border-gray-200">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <Icon name="CheckCircle" size={24} className="text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Onaylandƒ±</p>
                <p className="text-2xl font-bold text-gray-900">{statistics.confirmedOrders}</p>
              </div>
            </div>
          </div>

          <div className="bg-slate-100 rounded-lg p-6 shadow-sm border border-gray-200">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <Icon name="Package" size={24} className="text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Hazƒ±rlanƒ±yor</p>
                <p className="text-2xl font-bold text-gray-900">{statistics.preparingOrders}</p>
              </div>
            </div>
          </div>

          <div className="bg-slate-100 rounded-lg p-6 shadow-sm border border-gray-200">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <Icon name="Truck" size={24} className="text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Teslim Edildi</p>
                <p className="text-2xl font-bold text-gray-900">{statistics.deliveredOrders}</p>
              </div>
            </div>
          </div>


        </div>

        {/* Filtreler */}
        <div className="bg-slate-100 rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {/* Arama */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Arama
              </label>
              <div className="relative">
                <Icon name="Search" size={20} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <input
                  type="text"
                  value={filters.search}
                  onChange={(e) => handleFilterChange({ search: e.target.value })}
                  placeholder="Sipari≈ü no, m√º≈üteri adƒ±, telefon..."
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                />
              </div>
            </div>

            {/* Durum */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Durum
              </label>
              <select
                value={filters.status}
                onChange={(e) => handleFilterChange({ status: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
              >
                <option value="">T√ºm Durumlar</option>
                {availableStatuses.map((status) => (
                  <option key={status} value={status}>{status}</option>
                ))}
              </select>
            </div>

            {/* Tarih Aralƒ±ƒüƒ± */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Tarih Aralƒ±ƒüƒ±
              </label>
              <select
                value={filters.dateRange}
                onChange={(e) => handleFilterChange({ dateRange: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
              >
                <option value="all">T√ºm Zamanlar</option>
                <option value="today">Bug√ºn</option>
                <option value="week">Son 7 G√ºn</option>
                <option value="month">Son 30 G√ºn</option>
              </select>
            </div>

            {/* Sƒ±ralama */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Sƒ±ralama
              </label>
              <select
                value={filters.sortBy}
                onChange={(e) => handleFilterChange({ sortBy: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
              >
                <option value="newest">En Yeni</option>
                <option value="oldest">En Eski</option>
                <option value="amount_high">Tutar (Y√ºksek)</option>
                <option value="amount_low">Tutar (D√º≈ü√ºk)</option>
                <option value="customer">M√º≈üteri Adƒ±</option>
              </select>
            </div>
          </div>

          {/* Filtre Butonlarƒ± */}
          <div className="mt-4 flex justify-between items-center">
            <div className="text-sm text-gray-600">
              {filteredOrders.length} sipari≈ü bulundu
            </div>
            <button
              onClick={handleResetFilters}
              className="flex items-center space-x-2 px-4 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100/50 rounded-lg transition-colors bg-transparent"
            >
              <Icon name="RotateCcw" size={16} />
              <span>Filtreleri Sƒ±fƒ±rla</span>
            </button>
          </div>
        </div>

        {/* Sipari≈ü Listesi */}
        <div className="bg-slate-100 rounded-lg shadow-sm border border-gray-200 overflow-hidden">
          {paginatedOrders.length === 0 ? (
            <div className="text-center py-12">
              <Icon name="ShoppingCart" size={48} className="mx-auto text-gray-400 mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Sipari≈ü bulunamadƒ±</h3>
              <p className="text-gray-600">Arama kriterlerinizi deƒüi≈ütirmeyi deneyin.</p>
            </div>
          ) : (
            <>
              {/* Tablo Ba≈ülƒ±ƒüƒ± */}
              <div className="bg-gray-50 px-6 py-3 border-b border-gray-200">
                <div className="grid grid-cols-12 gap-4 text-sm font-medium text-gray-700">
                  <div className="col-span-2">Sipari≈ü No</div>
                  <div className="col-span-2">M√º≈üteri</div>
                  <div className="col-span-2">Durum</div>
                  <div className="col-span-1">√úr√ºn Sayƒ±sƒ±</div>
                  <div className="col-span-2">Tutar</div>
                  <div className="col-span-2">Tarih</div>
                  <div className="col-span-1">ƒ∞≈ülemler</div>
                </div>
              </div>

              {/* Sipari≈ü Satƒ±rlarƒ± */}
              <div className="divide-y divide-gray-200">
                {paginatedOrders.map((order) => (
                  <div key={order.id} className="px-6 py-4 hover:bg-gray-50 cursor-pointer" onClick={() => handleOrderDetail(order)}>
                    <div className="grid grid-cols-12 gap-4 items-center">
                      <div className="col-span-2">
                        <div className="font-medium text-gray-900">{order.orderNumber}</div>
                      </div>
                      <div className="col-span-2">
                        <div className="font-medium text-gray-900">{order.customerName}</div>
                        <div className="text-sm text-gray-500">{order.customerPhone}</div>
                      </div>
                      <div className="col-span-2">
                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(order.status)}`}>
                          {order.status}
                        </span>
                      </div>
                      <div className="col-span-1">
                        <span className="text-gray-900">{order.itemCount} √ºr√ºn</span>
                      </div>
                      <div className="col-span-2">
                        <span className="font-medium text-gray-900">{formatCurrency(order.total)}</span>
                      </div>
                      <div className="col-span-2">
                        <div className="text-sm text-gray-900">{formatDate(order.createdAt)}</div>
                      </div>
                      <div className="col-span-1">
                        <div className="flex space-x-2">
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleQuickStatusUpdate(order.id, 'Onaylandƒ±');
                            }}
                            className="p-1 text-gray-400 hover:text-green-600 hover:bg-green-50/50 rounded bg-transparent"
                            title="Hƒ±zlƒ± Onayla"
                          >
                            <Icon name="CheckCircle" size={16} />
                          </button>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleOpenStatusModal(order);
                            }}
                            className="p-1 text-gray-400 hover:text-blue-600 hover:bg-blue-50/50 rounded bg-transparent"
                            title="Durum G√ºncelle"
                          >
                            <Icon name="Edit" size={16} />
                          </button>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDeleteSingleOrder(order.id);
                            }}
                            className="p-1 text-gray-400 hover:text-red-600 hover:bg-red-50/50 rounded bg-transparent"
                            title="Sipari≈üi Sil"
                          >
                            <Icon name="Trash" size={16} />
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* Sayfalama */}
              {totalPages > 1 && (
                <div className="bg-gray-50 px-6 py-3 border-t border-gray-200">
                  <div className="flex items-center justify-between">
                    <div className="text-sm text-gray-700">
                      Sayfa {currentPage} / {totalPages} ({filteredOrders.length} sipari≈ü)
                    </div>
                    <div className="flex space-x-2">
                      <button
                        onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                        disabled={currentPage === 1}
                        className="px-3 py-1 text-sm bg-white/80 border border-gray-300 rounded hover:bg-gray-50/80 disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        √ñnceki
                      </button>
                      <button
                        onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                        disabled={currentPage === totalPages}
                        className="px-3 py-1 text-sm bg-white/80 border border-gray-300 rounded hover:bg-gray-50/80 disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        Sonraki
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </>
          )}
        </div>
      </div>

      {/* Modallar */}
      {showOrderDetail && selectedOrder && (
        <SiparisDetayModali
          order={selectedOrder}
          isOpen={showOrderDetail}
          onClose={() => {
            setShowOrderDetail(false);
            setSelectedOrder(null);
          }}
        />
      )}

      {showStatusUpdate && selectedOrder && (
        <DurumGuncellemeModali
          order={selectedOrder}
          isOpen={showStatusUpdate}
          onClose={() => {
            setShowStatusUpdate(false);
            setSelectedOrder(null);
          }}
          onUpdate={handleUpdateStatus}
        />
      )}
    </div>
  );
};

export default SiparisYonetimi;
